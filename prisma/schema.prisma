// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  coderUserId      String
  name             String?
  username         String          @unique
  email            String          @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  password         String
  admin            Boolean         @default(false)
  workspaces       Workspace[]
  stripeCustomer   StripeCustomer?
  stripeCustomerId String?
}

model StripeCustomer {
  id                        String @id
  stripeSubscriptionId      String
  stripeSubscriptionEndDate Int?
  subscriptionItemId        String
  User                      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    String @unique
}

model Template {
  id          String             @id
  name        String
  displayName String
  workspaces  Workspace[]
  version     String
  resources   TemplateResource[]
  token       TemplateToken?
}

model TemplateToken {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  templateId String?   @unique
  Template   Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model TemplateResource {
  id           String   @id
  name         String
  type         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Template     Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId   String
  startedPrice Float?
  stoppedPrice Float?

  @@unique([name, templateId])
}

model Workspace {
  id         String    @id
  name       String
  slug       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  builds     Build[]
  template   Template? @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String
  User       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

model Build {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  action      Action
  buildCost   Float?    @default(0)
}

enum Action {
  start
  stop
  destroy
}
