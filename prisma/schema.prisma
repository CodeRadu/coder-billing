// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model User {
  id               String          @id @default(cuid())
  coderUserId      String
  name             String?
  username         String          @unique
  email            String          @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  accounts         Account[]
  password         String
  admin            Boolean         @default(false)
  workspaces       Workspace[]
  stripeCustomer   StripeCustomer? @relation(fields: [stripeCustomerId], references: [id])
  stripeCustomerId String?
}

model StripeCustomer {
  id                        String @id
  stripeSubscriptionId      String
  stripeSubscriptionEndDate Int?
  subscriptionItemId        String
  User                      User[]
}

model Template {
  id           String      @id
  name         String
  displayName  String
  workspaces   Workspace[]
  startedPrice Float
  stoppedPrice Float
}

model Workspace {
  id         String    @id
  name       String
  slug       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  builds     Build[]
  template   Template? @relation(fields: [templateId], references: [id])
  templateId String
  User       User?     @relation(fields: [userId], references: [id])
  userId     String
}

model Build {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  action      Action
}

enum Action {
  start
  stop
  destroy
}
